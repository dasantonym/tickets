/*! tickets webkit - v0.1.0 - 2017-06-20 */

!function(){"use strict";angular.module("ticket-server",["ui.bootstrap","ngRoute","cgBusy","tickets.controllers.tickets"]).config(["$routeProvider","$locationProvider","$logProvider","$compileProvider",function(a,b,c,d){c.debugEnabled(!0);var e="./partials/";a.eagerInstantiationEnabled(!0),a.when("/list",{templateUrl:e+"tickets_list.html",controller:"Tickets.List"}),a.when("/sync",{templateUrl:e+"sync.html",controller:"Tickets.Sync"}),a.otherwise({redirectTo:"/list"})}]).run(["$rootScope","$q","$location",function(a,b,c){a.goto=function(a){c.path(a)},a.$on("$routeChangeStart",function(c,d,e){a.pageDefer&&(a.pageDefer.resolve(),a.pageDefer=null),a.pageDefer=b.defer(),a.pagePromise=a.pageDefer.promise}),a.$on("$routeChangeSuccess",function(b,c,d){a.pageDefer&&(a.pageDefer.resolve(),a.pageDefer=null)}),a.$on("$routeChangeError",function(b,c,d){a.pageDefer&&(a.pageDefer.reject(),a.pageDefer=null)})}])}(),function(){"use strict";var a=global.require;angular.module("tickets.controllers.tickets",[]).controller("Tickets.List",["$scope","$q","$routeParams",function(b,c,d){var e=a("lib-local/db.js"),f=c.defer();b.promiseString="Loading tickets...",b.promise=f.promise,b.tickets=[],b.filter={query:null},b.$watch("filter.query",function(a){async.each(b.tickets,function(c,d){[c.firstname.toLowerCase,c.lastname.toLowerCase(),c.email.toLowerCase(),c.token].join(" ").indexOf(a.toLowerCase())<0?b.tickets[b.tickets.indexOf(c)].hideEntry=!0:b.tickets[b.tickets.indexOf(c)].hideEntry=!1,d()})}),b.claimTicket=function(a){window.confirm("Are you sure you are claiming the right ticket "+a.token+" ("+[a.firstname,a.lastname].join(" ")+")?")&&(delete a.$$hashKey,console.log(a),a.isVoid=!0,e.update(a,a.token,function(a){a&&(console.log(a),b.alerts=[{type:"danger",msg:a.message}]),b.$apply()}))};var g=function(){e.find({},function(a,c){if(c.sort(function(a,b){return a.lastname<b.lastname?-1:a.lastname>b.lastname?1:0}),a)b.alerts=[{type:"danger",msg:a.message}];else if(0===b.tickets.length)b.tickets=c;else for(var d in c)!b.tickets[d].isVoid&&c[d].isVoid&&(b.tickets[d].isVoid=c[d].isVoid);f.resolve(),b.$apply(),window.setTimeout(function(){g()},2e3)})};g()}]).controller("Tickets.Sync",["$scope","$q","$http",function(b,c,d){b.remote={url:"",login:"",password:""},b.submit=function(){var e=c.defer(),f=a("lib-local/db.js");a("request");b.promiseString="Syncing...",b.promise=e.promise,b.token=void 0,async.waterfall([function(a){d({url:b.remote.url+"/api/access_tokens.json",method:"POST",data:{email:b.remote.login,password:b.remote.password}}).then(function(b){a(null,b)},function(b){a(null,b)})},function(a,b){200===a.status?b(null,a.data.token):403===a.status?b(new Error("Access Denied"),null):b(new Error("Unknown error: HTTP status "+a.status),null)},function(a,c){d({url:b.remote.url+"/api/data/dump/tickets.json",method:"GET",headers:{"X-Authentication":a}}).then(function(a){c(null,a)},function(a){c(null,a)})},function(a,b){200===a.status?b(null,a.data):403===a.status?b(new Error("Access Denied"),null):b(new Error("Unknown error: HTTP status "+a.status),null)},function(a,b){async.each(a,function(a,b){async.waterfall([function(b){f.findOne({token:a.token},b)},function(b,c){b?c(null,b):f.create(a,c)}],function(a){b(a)})},function(a){b(a)})}],function(a){if(a)return b.alerts=[{type:"danger",msg:a.message}],void e.reject();b.alerts=[{type:"success",msg:"Sync completed"}],e.resolve()})}}])}();